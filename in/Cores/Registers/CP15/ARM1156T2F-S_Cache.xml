<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<register_list
    name="CP15"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns="http://www.arm.com/core_reg"
    xsi:schemaLocation="http://www.arm.com/core_reg ../../../Schemas/core_register_definition.xsd"
    xmlns:tcf="http://com.arm.targetconfigurationeditor">
    <register_group name="Cache">
        <gui_name language="en">Cache</gui_name>
        <description language="en">Cache control and debug</description>
        <register access="RO" name="CACHE_TYPE" size="4">
            <gui_name language="en">Cache type</gui_name>
            <alias_name>CP15_CACHE_TYPE</alias_name>
            <device_name type="rvi">CP15_CACHE_TYPE</device_name>
            <device_name type="cadi">CP15_CACHE_TYPE</device_name>
            <description language="en">Cache type</description>
            <bitField conditional="false" name="CType">
                <gui_name language="en">CTYPE</gui_name>
                <description language="en">Cache type</description>
                <definition>[28:25]</definition>
            </bitField>
            <bitField conditional="false" name="S" enumerationId="GENERIC_UNIFIED_HARVARD">
                <gui_name language="en">S</gui_name>
                <description language="en">Specifies whether the cache is a unified cache or separate instruction and data caches</description>
                <definition>[24]</definition>
            </bitField>
            <bitField conditional="false" name="DSize" enumerationId="CP15_CACHE_TYPE_XSIZE">
                <gui_name language="en">DSize</gui_name>
                <description language="en">Data cache size</description>
                <definition>[20:18]</definition>
            </bitField>
            <bitField conditional="false" name="DAssoc" enumerationId="CP15_CACHE_TYPE_XASSOC">
                <gui_name language="en">DAssoc</gui_name>
                <description language="en">Data cache associativity</description>
                <definition>[17:15]</definition>
            </bitField>
            <bitField conditional="false" name="DM" enumerationId="CP15_CACHE_TYPE_XM">
                <gui_name language="en">DM</gui_name>
                <description language="en">Indicates the presence of the data cache</description>
                <definition>[14]</definition>
            </bitField>
            <bitField conditional="false" name="Dlen" enumerationId="CP15_CACHE_TYPE_XLEN">
                <gui_name language="en">Dlen</gui_name>
                <description language="en">D-cache line length</description>
                <definition>[13:12]</definition>
            </bitField>
            <bitField conditional="false" name="ISize" enumerationId="CP15_CACHE_TYPE_XSIZE">
                <gui_name language="en">ISize</gui_name>
                <description language="en">Instruction cache size</description>
                <definition>[8:6]</definition>
            </bitField>
            <bitField conditional="false" name="IAssoc" enumerationId="CP15_CACHE_TYPE_XASSOC">
                <gui_name language="en">DAssoc</gui_name>
                <description language="en">Data cache associativity</description>
                <definition>[5:3]</definition>
            </bitField>
            <bitField conditional="false" name="IM" enumerationId="CP15_CACHE_TYPE_XM">
                <gui_name language="en">IM</gui_name>
                <description language="en">Indicates the presence of the instruction cache</description>
                <definition>[2]</definition>
            </bitField>
            <bitField conditional="false" name="ILen" enumerationId="CP15_CACHE_TYPE_XLEN">
                <gui_name language="en">ILen</gui_name>
                <description language="en">I-cache line length</description>
                <definition>[1:0]</definition>
            </bitField>
        </register>
        <register access="WO" name="CACHE_INVALIDATE_I_MVA" size="4">
            <gui_name language="en">Invalidate Instruction Cache Line (using address)</gui_name>
            <alias_name>CP15_CACHE_INVALIDATE_I_MVA</alias_name>
            <device_name type="rvi">CP15_CACHE_INVALIDATE_I_MVA</device_name>
            <device_name type="cadi">CP15_CACHE_INVALIDATE_I_MVA</device_name>
            <description language="en">Invalidate Instruction Cache Line (using address)</description>
        </register>
        <register access="WO" name="CACHE_INVALIDATE_I_SI" size="4">
            <gui_name language="en">Invalidate Instruction Cache Line (using Set/Way)</gui_name>
            <alias_name>CP15_CACHE_INVALIDATE_I_SI</alias_name>
            <device_name type="rvi">CP15_CACHE_INVALIDATE_I_SI</device_name>
            <device_name type="cadi">CP15_CACHE_INVALIDATE_I_SI</device_name>
            <description language="en">Invalidate Instruction Cache Line (using Set/Way)</description>
            <bitField conditional="false" name="Way">
                <gui_name language="en">Way</gui_name>
                <description language="en">Selects the way to operate on</description>
                <definition>[31:30]</definition>
            </bitField>
            <bitField conditional="false" name="Set">
                <gui_name language="en">Set</gui_name>
                <description language="en">Selects the cache line to operate on</description>
                <definition>[13:5]</definition>
            </bitField>
        </register>
        <register access="WO" name="CACHE_INVALIDATE_D_MVA" size="4">
            <gui_name language="en">Invalidate Data Cache Line (using address)</gui_name>
            <alias_name>CP15_CACHE_INVALIDATE_D_MVA</alias_name>
            <device_name type="rvi">CP15_CACHE_INVALIDATE_D_MVA</device_name>
            <device_name type="cadi">CP15_CACHE_INVALIDATE_D_MVA</device_name>
            <description language="en">Invalidate Data Cache Line (using address)</description>
        </register>
        <register access="WO" name="CACHE_INVALIDATE_D_SI" size="4">
            <gui_name language="en">Invalidate Data Cache Line (using Set/Way)</gui_name>
            <alias_name>CP15_CACHE_INVALIDATE_D_SI</alias_name>
            <device_name type="rvi">CP15_CACHE_INVALIDATE_D_SI</device_name>
            <device_name type="cadi">CP15_CACHE_INVALIDATE_D_SI</device_name>
            <description language="en">Invalidate Data Cache Line (using Set/Way)</description>
            <bitField conditional="false" name="Way">
                <gui_name language="en">Way</gui_name>
                <description language="en">Selects the way to operate on</description>
                <definition>[31:30]</definition>
            </bitField>
            <bitField conditional="false" name="Set">
                <gui_name language="en">Set</gui_name>
                <description language="en">Selects the cache line to operate on</description>
                <definition>[13:5]</definition>
            </bitField>
        </register>
        <register access="WO" name="CACHE_CLEAN_D_MVA" size="4">
            <gui_name language="en">Clean Data Cache Line (using address)</gui_name>
            <alias_name>CP15_CACHE_CLEAN_D_MVA</alias_name>
            <device_name type="rvi">CP15_CACHE_CLEAN_D_MVA</device_name>
            <device_name type="cadi">CP15_CACHE_CLEAN_D_MVA</device_name>
            <description language="en">Clean Data Cache Line (using address)</description>
        </register>
        <register access="WO" name="CACHE_CLEAN_D_SI" size="4">
            <gui_name language="en">Clean Data Cache Line (using Set/Way)</gui_name>
            <alias_name>CP15_CACHE_CLEAN_D_SI</alias_name>
            <device_name type="rvi">CP15_CACHE_CLEAN_D_SI</device_name>
            <device_name type="cadi">CP15_CACHE_CLEAN_D_SI</device_name>
            <description language="en">Clean Data Cache Line (using Set/Way)</description>
            <bitField conditional="false" name="Way">
                <gui_name language="en">Way</gui_name>
                <description language="en">Selects the way to operate on</description>
                <definition>[31:30]</definition>
            </bitField>
            <bitField conditional="false" name="Set">
                <gui_name language="en">Set</gui_name>
                <description language="en">Selects the cache line to operate on</description>
                <definition>[13:5]</definition>
            </bitField>
        </register>
        <register access="WO" name="CACHE_PREFETCH_I_MVA" size="4">
            <gui_name language="en">Prefetch Instruction Cache Line</gui_name>
            <alias_name>CP15_CACHE_PREFETCH_I_MVA</alias_name>
            <device_name type="rvi">CP15_CACHE_PREFETCH_I_MVA</device_name>
            <device_name type="cadi">CP15_CACHE_PREFETCH_I_MVA</device_name>
            <description language="en">Prefetch Instruction Cache Line</description>
        </register>
        <register access="WO" name="CACHE_CLEAN_INVALIDATE_D_MVA" size="4">
            <gui_name language="en">Clean and Invalidate Data Cache Line (using address)</gui_name>
            <alias_name>CP15_CACHE_CLEAN_INVALIDATE_D_MVA</alias_name>
            <device_name type="rvi">CP15_CACHE_CLEAN_INVALIDATE_D_MVA</device_name>
            <device_name type="cadi">CP15_CACHE_CLEAN_INVALIDATE_D_MVA</device_name>
            <description language="en">Clean and Invalidate Data Cache Line (using address)</description>
        </register>
        <register access="WO" name="CACHE_CLEAN_INVALIDATE_D_SI" size="4">
            <gui_name language="en">Clean and Invalidate Data Cache Line (using Set/Way)</gui_name>
            <alias_name>CP15_CACHE_CLEAN_INVALIDATE_D_SI</alias_name>
            <device_name type="rvi">CP15_CACHE_CLEAN_INVALIDATE_D_SI</device_name>
            <device_name type="cadi">CP15_CACHE_CLEAN_INVALIDATE_D_SI</device_name>
            <description language="en">Clean and Invalidate Data Cache Line (using Set/Way)</description>
            <bitField conditional="false" name="Way">
                <gui_name language="en">Way</gui_name>
                <description language="en">Selects the way to operate on</description>
                <definition>[31:30]</definition>
            </bitField>
            <bitField conditional="false" name="Set">
                <gui_name language="en">Set</gui_name>
                <description language="en">Selects the cache line to operate on</description>
                <definition>[13:5]</definition>
            </bitField>
        </register>
        <register access="WO" name="CACHE_INVALIDATE_I" size="4">
            <gui_name language="en">Invalidate Entire Instruction Cache</gui_name>
            <alias_name>CP15_CACHE_INVALIDATE_I</alias_name>
            <device_name type="rvi">CP15_CACHE_INVALIDATE_I</device_name>
            <device_name type="cadi">CP15_CACHE_INVALIDATE_I</device_name>
            <description language="en">Invalidate Entire Instruction Cache</description>
        </register>
        <register access="WO" name="CACHE_INVALIDATE_D" size="4">
            <gui_name language="en">Invalidate Entire Data Cache</gui_name>
            <alias_name>CP15_CACHE_INVALIDATE_D</alias_name>
            <device_name type="rvi">CP15_CACHE_INVALIDATE_D</device_name>
            <device_name type="cadi">CP15_CACHE_INVALIDATE_D</device_name>
            <description language="en">Invalidate Entire Data Cache</description>
        </register>
        <register access="WO" name="CACHE_INVALIDATE" size="4">
            <gui_name language="en">Invalidate Both Caches</gui_name>
            <alias_name>CP15_CACHE_INVALIDATE</alias_name>
            <device_name type="rvi">CP15_CACHE_INVALIDATE</device_name>
            <device_name type="cadi">CP15_CACHE_INVALIDATE</device_name>
            <description language="en">Invalidate Both Caches</description>
        </register>
        <register access="WO" name="CACHE_CLEAN_D" size="4">
            <gui_name language="en">Clean Entire Data Cache</gui_name>
            <alias_name>CP15_CACHE_CLEAN_D</alias_name>
            <device_name type="rvi">CP15_CACHE_CLEAN_D</device_name>
            <device_name type="cadi">CP15_CACHE_CLEAN_D</device_name>
            <description language="en">Clean Entire Data Cache</description>
        </register>
        <register access="WO" name="CACHE_CLEAN_INVALIDATE_D" size="4">
            <gui_name language="en">Clean and Invalidate Entire Data Cache</gui_name>
            <alias_name>CP15_CACHE_CLEAN_INVALIDATE_D</alias_name>
            <device_name type="rvi">CP15_CACHE_CLEAN_INVALIDATE_D</device_name>
            <device_name type="cadi">CP15_CACHE_CLEAN_INVALIDATE_D</device_name>
            <description language="en">Clean and Invalidate Entire Data Cache</description>
        </register>
        <register access="WO" name="CACHE_FLUSH_PREFETCHBUFFER" size="4">
            <gui_name language="en">Flush Prefetch Buffer</gui_name>
            <alias_name>CP15_CACHE_FLUSH_PREFETCHBUFFER</alias_name>
            <device_name type="rvi">CP15_CACHE_FLUSH_PREFETCHBUFFER</device_name>
            <device_name type="cadi">CP15_CACHE_FLUSH_PREFETCHBUFFER</device_name>
            <description language="en">Flush Prefetch Buffer</description>
        </register>
        <register access="WO" name="CACHE_INVALIDATE_I_RANGE" size="8">
            <gui_name language="en">Invalidate Instruction Cache Range</gui_name>
            <alias_name>CP15_CACHE_INVALIDATE_I_RANGE</alias_name>
            <device_name type="rvi">CP15_CACHE_INVALIDATE_I_RANGE</device_name>
            <device_name type="cadi">CP15_CACHE_INVALIDATE_I_RANGE</device_name>
            <description language="en">Invalidate Instruction Cache Range</description>
        </register>
        <register access="WO" name="CACHE_INVALIDATE_D_RANGE" size="8">
            <gui_name language="en">Invalidate Data Cache Range</gui_name>
            <alias_name>CP15_CACHE_INVALIDATE_D_RANGE</alias_name>
            <device_name type="rvi">CP15_CACHE_INVALIDATE_D_RANGE</device_name>
            <device_name type="cadi">CP15_CACHE_INVALIDATE_D_RANGE</device_name>
            <description language="en">Invalidate Data Cache Range</description>
        </register>
        <register access="WO" name="CACHE_CLEAN_D_RANGE" size="8">
            <gui_name language="en">Clean Data Cache Range</gui_name>
            <alias_name>CP15_CACHE_CLEAN_D_RANGE</alias_name>
            <device_name type="rvi">CP15_CACHE_CLEAN_D_RANGE</device_name>
            <device_name type="cadi">CP15_CACHE_CLEAN_D_RANGE</device_name>
            <description language="en">Clean Data Cache Range</description>
        </register>
        <register access="WO" name="CACHE_CLEAN_INVALIDATE_D_RANGE" size="8">
            <gui_name language="en">Clean and Invalidate Data Cache Range</gui_name>
            <alias_name>CP15_CACHE_CLEAN_INVALIDATE_D_RANGE</alias_name>
            <device_name type="rvi">CP15_CACHE_CLEAN_INVALIDATE_D_RANGE</device_name>
            <device_name type="cadi">CP15_CACHE_CLEAN_INVALIDATE_D_RANGE</device_name>
            <description language="en">Clean and Invalidate Data Cache Range</description>
        </register>
        <register access="WO" name="CACHE_DRAIN_MB" size="4">
            <gui_name language="en">Data Memory Barrier operation</gui_name>
            <alias_name>CP15_CACHE_DRAIN_MB</alias_name>
            <device_name type="rvi">CP15_CACHE_DRAIN_MB</device_name>
            <device_name type="cadi">CP15_CACHE_DRAIN_MB</device_name>
            <description language="en">Ensures that all outstanding explicit memory transactions complete before any following explicit memory transactions begin</description>
        </register>
        <register access="WO" name="CACHE_DRAIN_WB" size="4">
            <gui_name language="en">Drain Write Buffer operation</gui_name>
            <alias_name>CP15_CACHE_DRAIN_WB</alias_name>
            <device_name type="rvi">CP15_CACHE_DRAIN_WB</device_name>
            <device_name type="cadi">CP15_CACHE_DRAIN_WB</device_name>
            <description language="en">Ensures that all explicit memory transactions that occur in program order before this instruction are completed</description>
        </register>
        <register access="WO" name="CACHE_WAIT_FOR_INTERRUPT" size="4">
            <gui_name language="en">Wait For Interrupt operation</gui_name>
            <alias_name>CP15_CACHE_WAIT_FOR_INTERRUPT</alias_name>
            <device_name type="rvi">CP15_CACHE_WAIT_FOR_INTERRUPT</device_name>
            <device_name type="cadi">CP15_CACHE_WAIT_FOR_INTERRUPT</device_name>
            <description language="en">Puts the processor in to a low power state</description>
        </register>
        <register access="RO" name="CACHE_CACHEDIRTYSTATUS" size="4">
            <gui_name language="en">Cache Dirty Status</gui_name>
            <alias_name>CP15_CACHE_CACHEDIRTYSTATUS</alias_name>
            <device_name type="rvi">CP15_CACHE_CACHEDIRTYSTATUS</device_name>
            <device_name type="cadi">CP15_CACHE_CACHEDIRTYSTATUS</device_name>
            <description language="en">Indicates when the cache is dirty</description>
            <bitField conditional="false" name="C" enumerationId="CP15_CACHE_CACHEDIRTYSTATUS_C">
                <gui_name language="en">C</gui_name>
                <description language="en">Indicates if the cache is dirty</description>
                <definition>[0]</definition>
            </bitField>
        </register>
        <register access="RW" name="DCACHE_LOCKS" size="4">
            <gui_name language="en">Data Cache Lockdown</gui_name>
            <alias_name>CP15_DCACHE_LOCKS</alias_name>
            <device_name type="rvi">CP15_DCACHE_LOCKS</device_name>
            <device_name type="cadi">CP15_DCACHE_LOCKS</device_name>
            <description language="en">Provides a means to lockdown the data cache and therefore provide some control over pollution that applications might cause</description>
            <bitField conditional="false" name="Way_3_Lock" enumerationId="GENERIC_UNLOCKED_LOCKED">
                <gui_name language="en">Way 3 Lock</gui_name>
                <description language="en">Allows cache way 3 to be locked, preventing any allocation</description>
                <definition>[3]</definition>
            </bitField>
            <bitField conditional="false" name="Way_2_Lock" enumerationId="GENERIC_UNLOCKED_LOCKED">
                <gui_name language="en">Way 2 Lock</gui_name>
                <description language="en">Allows cache way 2 to be locked, preventing any allocation</description>
                <definition>[2]</definition>
            </bitField>
            <bitField conditional="false" name="Way_1_Lock" enumerationId="GENERIC_UNLOCKED_LOCKED">
                <gui_name language="en">Way 1 Lock</gui_name>
                <description language="en">Allows cache way 1 to be locked, preventing any allocation</description>
                <definition>[1]</definition>
            </bitField>
            <bitField conditional="false" name="Way_0_Lock" enumerationId="GENERIC_UNLOCKED_LOCKED">
                <gui_name language="en">Way 0 Lock</gui_name>
                <description language="en">Allows cache way 0 to be locked, preventing any allocation</description>
                <definition>[0]</definition>
            </bitField>
        </register>
        <register access="RW" name="ICACHE_LOCKS" size="4">
            <gui_name language="en">Instruction Cache Lockdown</gui_name>
            <alias_name>CP15_ICACHE_LOCKS</alias_name>
            <device_name type="rvi">CP15_ICACHE_LOCKS</device_name>
            <device_name type="cadi">CP15_ICACHE_LOCKS</device_name>
            <description language="en">Provides a means to lockdown the instruction cache and therefore provide some control over pollution that applications might cause</description>
            <bitField conditional="false" name="Way_3_Lock" enumerationId="GENERIC_UNLOCKED_LOCKED">
                <gui_name language="en">Way 3 Lock</gui_name>
                <description language="en">Allows cache way 3 to be locked, preventing any allocation</description>
                <definition>[3]</definition>
            </bitField>
            <bitField conditional="false" name="Way_2_Lock" enumerationId="GENERIC_UNLOCKED_LOCKED">
                <gui_name language="en">Way 2 Lock</gui_name>
                <description language="en">Allows cache way 2 to be locked, preventing any allocation</description>
                <definition>[2]</definition>
            </bitField>
            <bitField conditional="false" name="Way_1_Lock" enumerationId="GENERIC_UNLOCKED_LOCKED">
                <gui_name language="en">Way 1 Lock</gui_name>
                <description language="en">Allows cache way 1 to be locked, preventing any allocation</description>
                <definition>[1]</definition>
            </bitField>
            <bitField conditional="false" name="Way_0_Lock" enumerationId="GENERIC_UNLOCKED_LOCKED">
                <gui_name language="en">Way 0 Lock</gui_name>
                <description language="en">Allows cache way 0 to be locked, preventing any allocation</description>
                <definition>[0]</definition>
            </bitField>
        </register>
        <register access="RW" name="DATA_CACHE_DEBUG" size="4">
            <gui_name language="en">Data Cache Debug</gui_name>
            <description language="en">Holds data:&#x0A;- that is returned on a data Tag RAM read operation&#x0A;- for a data Tag RAM write operation&#x0A;- that is returned on a data cache Data RAM Parity read operation&#x0A;- that is returned on a data Tag RAM Parity read operation&#x0A;- for a data Valid and Dirty RAM write operation</description>
            <bitField conditional="false" name="TAG_Address">
                <gui_name language="en">TAG Address</gui_name>
                <description language="en">Holds the Tag address for the cache way</description>
                <definition>[31:5]</definition>
            </bitField>
            <bitField conditional="false" name="Dirty">
                <gui_name language="en">Dirty</gui_name>
                <description language="en">Holds the value of the Dirty bits from the data Tag RAM on reads or writes</description>
                <definition>[2:1]</definition>
            </bitField>
            <bitField conditional="false" name="V">
                <gui_name language="en">V</gui_name>
                <description language="en">Holds the value of the Valid bit from the data Tag RAM on reads or writes</description>
                <definition>[0]</definition>
            </bitField>
            <bitField conditional="false" name="Cache_Parity">
                <gui_name language="en">Cache Parity</gui_name>
                <description language="en">Holds the value of the parity bits from data cache data RAM</description>
                <definition>[3:0]</definition>
            </bitField>
            <bitField conditional="false" name="Tag_Parity">
                <gui_name language="en">Tag Parity</gui_name>
                <description language="en">Holds the value of parity bits the data Tag RAM</description>
                <definition>[18:16]</definition>
            </bitField>
        </register>
        <register access="RO" name="INSTR_CACHE_DEBUG" size="4">
            <gui_name language="en">Instruction Cache Debug</gui_name>
            <description language="en">Holds data:&#x0A;- that is returned on an Instruction cache Tag RAM read operation&#x0A;- for an Instruction cache Tag RAM write operation&#x0A;- that is returned on an Instruction cache Tag RAM Parity read operation&#x0A;- that is returned on an Instruction Cache Data RAM read operation&#x0A;- for an instruction write operation to the Cache Data RAM&#x0A;- that is returned on an Instruction Cache Data RAM Parity read operation</description>
            <bitField conditional="false" name="Instruction">
                <gui_name language="en">Instruction</gui_name>
                <description language="en">Contains the instruction for an instruction cache data RAM read or write</description>
                <definition>[31:0]</definition>
            </bitField>
            <bitField conditional="false" name="TAG_Address">
                <gui_name language="en">TAG Address</gui_name>
                <description language="en">Contains the address of the instruction</description>
                <definition>[31:5]</definition>
            </bitField>
            <bitField conditional="false" name="Dirty">
                <gui_name language="en">Dirty</gui_name>
                <description language="en">Holds the value of the Dirty bits from the instruction cache Tag RAM on reads or writes</description>
                <definition>[2:1]</definition>
            </bitField>
            <bitField conditional="false" name="V">
                <gui_name language="en">V</gui_name>
                <description language="en">Holds the value of the Valid bit from the instruction cache Tag RAM on reads or writes</description>
                <definition>[0]</definition>
            </bitField>
            <bitField conditional="false" name="Cache_Parity">
                <gui_name language="en">Cache Parity</gui_name>
                <description language="en">Holds the value of the parity bits from instruction cache data RAM</description>
                <definition>[3:0]</definition>
            </bitField>
            <bitField conditional="false" name="Tag_Parity">
                <gui_name language="en">Tag Parity</gui_name>
                <description language="en">Holds the value of Parity bits from the instruction cache Tag RAM</description>
                <definition>[18:16]</definition>
            </bitField>
        </register>
        <register access="WO" name="DATA_CACHE_TAG_READ_OP" size="4">
            <gui_name language="en">Data cache Tag RAM read operation</gui_name>
            <description language="en">Reads the data cache Tag RAM contents into the Data Cache Debug Register</description>
            <bitField conditional="false" name="Way">
                <gui_name language="en">Way</gui_name>
                <description language="en">Holds the Way value</description>
                <definition>[31:28]</definition>
            </bitField>
            <bitField conditional="false" name="Set">
                <gui_name language="en">Set</gui_name>
                <description language="en">Holds the Set value</description>
                <definition>[13:5]</definition>
            </bitField>
        </register>
        <register access="WO" name="DATA_CACHE_TAG_WRITE_OP" size="4">
            <gui_name language="en">Data cache Tag RAM write operation</gui_name>
            <description language="en">Writes the Data Cache Debug Register into the Data Tag RAM</description>
            <bitField conditional="false" name="Way">
                <gui_name language="en">Way</gui_name>
                <description language="en">Holds the Way value</description>
                <definition>[31:28]</definition>
            </bitField>
            <bitField conditional="false" name="Set">
                <gui_name language="en">Set</gui_name>
                <description language="en">Holds the Set value</description>
                <definition>[13:5]</definition>
            </bitField>
        </register>
        <register access="WO" name="DATA_TAG_PARITY_READ_OP" size="4">
            <gui_name language="en">Data Tag RAM parity read operation</gui_name>
            <description language="en">Reads the Data cache Tag RAM parity bits into the Cache Debug Register</description>
            <bitField conditional="false" name="Way">
                <gui_name language="en">Way</gui_name>
                <description language="en">Holds the Way value</description>
                <definition>[31:28]</definition>
            </bitField>
            <bitField conditional="false" name="Set">
                <gui_name language="en">Set</gui_name>
                <description language="en">Holds the Set value</description>
                <definition>[13:5]</definition>
            </bitField>
        </register>
        <register access="WO" name="INSTR_TAG_PARITY_READ_OP" size="4">
            <gui_name language="en">Instruction Tag RAM parity read operation</gui_name>
            <description language="en">Reads the Instruction cache Tag RAM parity bits into the Cache Debug Register</description>
            <bitField conditional="false" name="Way">
                <gui_name language="en">Way</gui_name>
                <description language="en">Holds the Way value</description>
                <definition>[31:28]</definition>
            </bitField>
            <bitField conditional="false" name="Set">
                <gui_name language="en">Set</gui_name>
                <description language="en">Holds the Set value</description>
                <definition>[13:5]</definition>
            </bitField>
        </register>
        <register access="WO" name="INSTR_CACHE_TAG_READ_OP" size="4">
            <gui_name language="en">Instruction cache Tag RAM read operation</gui_name>
            <description language="en">Reads the Instruction cache Tag and Valid RAMs contents into the Instruction Cache Debug Register</description>
            <bitField conditional="false" name="Way">
                <gui_name language="en">Way</gui_name>
                <description language="en">Holds the Way value</description>
                <definition>[31:28]</definition>
            </bitField>
            <bitField conditional="false" name="Set">
                <gui_name language="en">Set</gui_name>
                <description language="en">Holds the Set value</description>
                <definition>[13:5]</definition>
            </bitField>
        </register>
        <register access="WO" name="INSTR_CACHE_TAG_WRITE_OP" size="4">
            <gui_name language="en">Write Instruction Cache Debug Register</gui_name>
            <description language="en">Writes into the Data Cache Debug Register into the Instruction Cache Tag and Valid RAMs</description>
            <bitField conditional="false" name="Way">
                <gui_name language="en">Way</gui_name>
                <description language="en">Holds the Way value</description>
                <definition>[31:28]</definition>
            </bitField>
            <bitField conditional="false" name="Set">
                <gui_name language="en">Set</gui_name>
                <description language="en">Holds the Set value</description>
                <definition>[13:5]</definition>
            </bitField>
        </register>
        <register access="WO" name="INSTR_CACHE_DATA_READ_OP" size="4">
            <gui_name language="en">Instruction Cache Data RAM read operation</gui_name>
            <description language="en">Reads the Instruction Cache Data Tag RAM contents into the Instruction Cache Debug Register</description>
            <bitField conditional="false" name="Way">
                <gui_name language="en">Way</gui_name>
                <description language="en">Holds the Way value</description>
                <definition>[31:28]</definition>
            </bitField>
            <bitField conditional="false" name="Set">
                <gui_name language="en">Set</gui_name>
                <description language="en">Holds the Set value</description>
                <definition>[13:5]</definition>
            </bitField>
            <bitField conditional="false" name="Word">
                <gui_name language="en">Word</gui_name>
                <description language="en">Holds the Word position within a cache line</description>
                <definition>[4:2]</definition>
            </bitField>
        </register>
        <register access="WO" name="INSTR_CACHE_DATA_WRITE_OP" size="4">
            <gui_name language="en">Write Instruction Cache Debug Register</gui_name>
            <description language="en">Writes the Instruction Cache Debug Register into the Instruction Cache Data Tag RAM</description>
            <bitField conditional="false" name="Way">
                <gui_name language="en">Way</gui_name>
                <description language="en">Holds the Way value</description>
                <definition>[31:28]</definition>
            </bitField>
            <bitField conditional="false" name="Set">
                <gui_name language="en">Set</gui_name>
                <description language="en">Holds the Set value</description>
                <definition>[13:5]</definition>
            </bitField>
            <bitField conditional="false" name="Word">
                <gui_name language="en">Word</gui_name>
                <description language="en">Holds the Word position within a cache line</description>
                <definition>[4:2]</definition>
            </bitField>
        </register>
        <register access="WO" name="DATA_CACHE_PARITY_READ_OP" size="4">
            <gui_name language="en">Data Cache Data RAM parity read operation</gui_name>
            <description language="en">Reads the data cache RAM parity bits into the Data Cache Debug Register</description>
            <bitField conditional="false" name="Way">
                <gui_name language="en">Way</gui_name>
                <description language="en">Holds the Way value</description>
                <definition>[31:28]</definition>
            </bitField>
            <bitField conditional="false" name="Set">
                <gui_name language="en">Set</gui_name>
                <description language="en">Holds the Set value</description>
                <definition>[13:5]</definition>
            </bitField>
        </register>
        <register access="WO" name="INSTR_CACHE_PARITY_READ_OP" size="4">
            <gui_name language="en">Instruction Cache Data RAM parity read operation</gui_name>
            <description language="en">Reads the instruction cache RAM parity bits into the Instruction Cache Debug Register</description>
            <bitField conditional="false" name="Way">
                <gui_name language="en">Way</gui_name>
                <description language="en">Holds the Way value</description>
                <definition>[31:28]</definition>
            </bitField>
            <bitField conditional="false" name="Set">
                <gui_name language="en">Set</gui_name>
                <description language="en">Holds the Set value</description>
                <definition>[13:5]</definition>
            </bitField>
        </register>
        <register access="RW" name="INSTR_CACHE_MASTER_VALID_7" size="4">
            <gui_name language="en">Instruction Cache Master Valid Bank 7</gui_name>
            <description language="en">Masks the Valid bits held in Bank 7 of the Instruction Valid RAM for the instruction cache</description>
        </register>
        <register access="RW" name="INSTR_CACHE_MASTER_VALID_6" size="4">
            <gui_name language="en">Instruction Cache Master Valid Bank 6</gui_name>
            <description language="en">Masks the Valid bits held in Bank 6 of the Instruction Valid RAM for the instruction cache</description>
        </register>
        <register access="RW" name="INSTR_CACHE_MASTER_VALID_5" size="4">
            <gui_name language="en">Instruction Cache Master Valid Bank 5</gui_name>
            <description language="en">Masks the Valid bits held in Bank 5 of the Instruction Valid RAM for the instruction cache</description>
        </register>
        <register access="RW" name="INSTR_CACHE_MASTER_VALID_4" size="4">
            <gui_name language="en">Instruction Cache Master Valid Bank 4</gui_name>
            <description language="en">Masks the Valid bits held in Bank 4 of the Instruction Valid RAM for the instruction cache</description>
        </register>
        <register access="RW" name="INSTR_CACHE_MASTER_VALID_3" size="4">
            <gui_name language="en">Instruction Cache Master Valid Bank 3</gui_name>
            <description language="en">Masks the Valid bits held in Bank 3 of the Instruction Valid RAM for the instruction cache</description>
        </register>
        <register access="RW" name="INSTR_CACHE_MASTER_VALID_2" size="4">
            <gui_name language="en">Instruction Cache Master Valid Bank 2</gui_name>
            <description language="en">Masks the Valid bits held in Bank 2 of the Instruction Valid RAM for the instruction cache</description>
        </register>
        <register access="RW" name="INSTR_CACHE_MASTER_VALID_1" size="4">
            <gui_name language="en">Instruction Cache Master Valid Bank 1</gui_name>
            <description language="en">Masks the Valid bits held in Bank 1 of the Instruction Valid RAM for the instruction cache</description>
        </register>
        <register access="RW" name="INSTR_CACHE_MASTER_VALID_0" size="4">
            <gui_name language="en">Instruction Cache Master Valid Bank 0</gui_name>
            <description language="en">Masks the Valid bits held in Bank 0 of the Instruction Valid RAM for the instruction cache</description>
        </register>
        <register access="RW" name="DATA_CACHE_MASTER_VALID_7" size="4">
            <gui_name language="en">Data Cache Master Valid Bank 7</gui_name>
            <description language="en">Masks the Valid bits held in Bank 7 of the Data Valid RAM for the data cache</description>
        </register>
        <register access="RW" name="DATA_CACHE_MASTER_VALID_6" size="4">
            <gui_name language="en">Data Cache Master Valid Bank 6</gui_name>
            <description language="en">Masks the Valid bits held in Bank 6 of the Data Valid RAM for the data cache</description>
        </register>
        <register access="RW" name="DATA_CACHE_MASTER_VALID_5" size="4">
            <gui_name language="en">Data Cache Master Valid Bank 5</gui_name>
            <description language="en">Masks the Valid bits held in Bank 5 of the Data Valid RAM for the data cache</description>
        </register>
        <register access="RW" name="DATA_CACHE_MASTER_VALID_4" size="4">
            <gui_name language="en">Data Cache Master Valid Bank 4</gui_name>
            <description language="en">Masks the Valid bits held in Bank 4 of the Data Valid RAM for the data cache</description>
        </register>
        <register access="RW" name="DATA_CACHE_MASTER_VALID_3" size="4">
            <gui_name language="en">Data Cache Master Valid Bank 3</gui_name>
            <description language="en">Masks the Valid bits held in Bank 3 of the Data Valid RAM for the data cache</description>
        </register>
        <register access="RW" name="DATA_CACHE_MASTER_VALID_2" size="4">
            <gui_name language="en">Data Cache Master Valid Bank 2</gui_name>
            <description language="en">Masks the Valid bits held in Bank 2 of the Data Valid RAM for the data cache</description>
        </register>
        <register access="RW" name="DATA_CACHE_MASTER_VALID_1" size="4">
            <gui_name language="en">Data Cache Master Valid Bank 1</gui_name>
            <description language="en">Masks the Valid bits held in Bank 1 of the Data Valid RAM for the data cache</description>
        </register>
        <register access="RW" name="DATA_CACHE_MASTER_VALID_0" size="4">
            <gui_name language="en">Data Cache Master Valid Bank 0</gui_name>
            <description language="en">Masks the Valid bits held in Bank 0 of the Data Valid RAM for the data cache</description>
        </register>
        <register access="RW" name="CACHE_DEBUG_CONTROL" size="4">
            <gui_name language="en">Cache Debug Control</gui_name>
            <description language="en">Allows a debugger to control access to the cache</description>
            <bitField conditional="false" name="WT" enumerationId="GENERIC_DISABLED_ENABLED">
                <gui_name language="en">WT</gui_name>
                <description language="en">Enables write-through behavior for regions marked as write-back</description>
                <definition>[2]</definition>
            </bitField>
            <bitField conditional="false" name="IL" enumerationId="GENERIC_ENABLED_DISABLED">
                <gui_name language="en">IL</gui_name>
                <description language="en">Enables or disables Instruction cache linefill</description>
                <definition>[1]</definition>
            </bitField>
            <bitField conditional="false" name="DL" enumerationId="GENERIC_ENABLED_DISABLED">
                <gui_name language="en">DL</gui_name>
                <description language="en">Enables or disables data cache linefill</description>
                <definition>[0]</definition>
            </bitField>
        </register>
        <register access="WO" name="DATA_CACHE_VALID_WRITE_OP" size="4">
            <gui_name language="en">Data Cache Valid RAM and Dirty RAM bit write operation</gui_name>
            <description language="en">Writes from the Data Cache Debug Register into the Data Cache Valid RAM and Dirty RAM bit</description>
            <bitField conditional="false" name="Way">
                <gui_name language="en">Way</gui_name>
                <description language="en">Holds the Way value</description>
                <definition>[31:28]</definition>
            </bitField>
            <bitField conditional="false" name="Set">
                <gui_name language="en">Set</gui_name>
                <description language="en">Holds the Set value</description>
                <definition>[13:5]</definition>
            </bitField>
        </register>
    </register_group>
</register_list>

